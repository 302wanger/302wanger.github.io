<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为什么编程语言的数组下标从0开始</title>
      <link href="/2020/03/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
      <url>/2020/03/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E4%BB%8E0%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>举个例子，一个小孩子将5个玩具从筐里拿出来，他是这么计数的：1，2，3，4，5 。而在编程领域，从数组里取值，是这么计数的：0，1，2，3，4。<br>是不是很神奇，那为何编程领域要这么做的？<br>通过查找资料和文章，发现原因如下：</p><h4 id="原因1-历史原因，别人是这么干的"><a href="#原因1-历史原因，别人是这么干的" class="headerlink" title="原因1:历史原因，别人是这么干的"></a>原因1:历史原因，别人是这么干的</h4><p>C语言设计者用0开始计数数组下标，之后的Java，JavsScript等高级语言都模仿了C语言，或者说，为了在一定成都上减少C语言程序员学习Java的学习成本，因此继续沿用了从0开始计数的习惯。</p><p>实际上，也有其他语言中数组并不是从0开始的，比如Matlab，甚至还有一些语言支持负数下标，比如Python。</p><h4 id="原因2-底层为了性能"><a href="#原因2-底层为了性能" class="headerlink" title="原因2:底层为了性能"></a>原因2:底层为了性能</h4><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移”。如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[n]就表示偏移n个type_size 的位置，所以计算a[n]的内存地址只需要下边这个公式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[n]_address &#x3D; base_address + n * type_size</span><br></pre></td></tr></table></figure><p>但是，如果数组从1开始计数，那么计算数组元素的a[n]的内存地址就会变成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a[n]_address &#x3D; base_address + (n-1)*type_size</span><br></pre></td></tr></table></figure><p>对比两个公式，如果从1开始编号，每次随机访问数组就多了一次减法运算，对于CPU来说，就是多了一次减法指令。</p><p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的编程操作，效率的优化要尽可能做到极致。所以为了减少一次减法操作，数组选择了从0开始编号，而不是从1开始。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三种方法实现阶乘</title>
      <link href="/2020/03/11/%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E9%98%B6%E4%B9%98/"/>
      <url>/2020/03/11/%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E9%98%B6%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h1 id="三种实现阶乘的方法"><a href="#三种实现阶乘的方法" class="headerlink" title="三种实现阶乘的方法"></a>三种实现阶乘的方法</h1><p>方法1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function factorialize(num) &#123;</span><br><span class="line">  &#x2F;&#x2F; 如果num小于1，则终止</span><br><span class="line">  if (num&lt;0) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125; else if (num &#x3D;&#x3D;&#x3D; 0 || num &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">    &#x2F;&#x2F; num&#x3D;0或num&#x3D;1，返回1，这个是定理</span><br><span class="line">    return 1;</span><br><span class="line">  &#125; else&#123;</span><br><span class="line">    return num * factorialize(num-1);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">factorialize(5);</span><br></pre></td></tr></table></figure><p>第一个方法及其简单，else语句中是重复调用函数。但是这种方法好像有内存溢出的风险；</p><p>方法2：for循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function factorialize(num) &#123;</span><br><span class="line">  if (num &lt; 0) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125; else if (num&#x3D;&#x3D;&#x3D;0 || num &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    for (var i &#x3D; num -1; i &gt;&#x3D; 1; i--) &#123;</span><br><span class="line">      num *&#x3D; i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3：while循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function factorialize(num) &#123;</span><br><span class="line">  var result &#x3D; num;</span><br><span class="line">  if (num &lt; 1) &#123;</span><br><span class="line">    return -1;</span><br><span class="line">  &#125; else if (num&#x3D;&#x3D;&#x3D;0 || num&#x3D;&#x3D;&#x3D;1) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    while (num &gt; 1) &#123;</span><br><span class="line">      num--;</span><br><span class="line">      result *&#x3D; num;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数</title>
      <link href="/2020/03/11/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>/2020/03/11/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>罗马数字包含以下七种字符:I，V，X，L，C，D和M。</p><p><em>字符</em>          <em>数值</em><br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做II，即为两个并列的 1。12 写做XII，即为X+II。 27 写做XXVII, 即为XX+V+II。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做IIII，而是IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I可以放在V(5) 和X(10) 的左边，来表示 4 和 9。</li><li>X可以放在L(50) 和C(100) 的左边，来表示 40 和90。</li><li>C可以放在D(500) 和M(1000) 的左边，来表示400 和900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1到 3999 的范围内。</li></ul><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">let romanObj &#x3D; &#123;</span><br><span class="line">&#39;I&#39;: 1,</span><br><span class="line">    &#39;V&#39;: 5,</span><br><span class="line">    &#39;X&#39;: 10,</span><br><span class="line">    &#39;L&#39;: 50,</span><br><span class="line">    &#39;C&#39;: 100,</span><br><span class="line">    &#39;D&#39;: 500,</span><br><span class="line">    &#39;M&#39;: 1000</span><br><span class="line">&#125;</span><br><span class="line">let romanToInt &#x3D; function(s) &#123;</span><br><span class="line">let max &#x3D; 0;</span><br><span class="line">let result &#x3D; 0;</span><br><span class="line">let sLength &#x3D; s.length - 1;</span><br><span class="line">for (var i &#x3D; sLength; i &gt;&#x3D; 0; i--) &#123;</span><br><span class="line">var currRoman &#x3D; s[i];</span><br><span class="line">var currVal &#x3D; romanObj[currRoman];</span><br><span class="line">result +&#x3D; currVal &gt; max ? currVal : -currVal;</span><br><span class="line">max &#x3D; Math.max(max, currVal);</span><br><span class="line">&#125;</span><br><span class="line">return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>罗马字符串自右向左是数值递增的，而一旦出现不符合规律的，就应该减去该值，即将当前值取负。<br>该方法的关键就在于此，max中保存的就相当于最右边值，currVal是左边值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Python进行两张图片比较</title>
      <link href="/2020/03/11/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E4%B8%A4%E5%BC%A0%E5%9B%BE%E7%89%87%E6%AF%94%E8%BE%83/"/>
      <url>/2020/03/11/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E4%B8%A4%E5%BC%A0%E5%9B%BE%E7%89%87%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><p>Python 2.7 or Python 3</p><h3 id="需要安装的包"><a href="#需要安装的包" class="headerlink" title="需要安装的包"></a>需要安装的包</h3><p>pytesseract<br>pytesser<br>Pillow</p><h3 id="达成目标"><a href="#达成目标" class="headerlink" title="达成目标"></a>达成目标</h3><p>比较两张图片是不是一个图片</p><h3 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python file.py</span><br></pre></td></tr></table></figure><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#!C:&#x2F;Python27 &amp; Python3  </span><br><span class="line">#coding&#x3D;utf-8 </span><br><span class="line"># 1. pip install pillow</span><br><span class="line"># 2. pip install pytesseract</span><br><span class="line"># 3. pip install pytesser</span><br><span class="line"># Run: python comporePicture.py </span><br><span class="line"></span><br><span class="line">import pytesseract  </span><br><span class="line">from pytesser import *  </span><br><span class="line">from PIL import Image,ImageEnhance,ImageFilter  </span><br><span class="line">import os  </span><br><span class="line">import fnmatch  </span><br><span class="line">import re,time  </span><br><span class="line">  </span><br><span class="line">import urllib, random  </span><br><span class="line">  </span><br><span class="line">#import hashlib    </span><br><span class="line">   </span><br><span class="line">def getGray(image_file):  </span><br><span class="line">   tmpls&#x3D;[]  </span><br><span class="line">   for h in range(0,  image_file.size[1]):#h  </span><br><span class="line">      for w in range(0, image_file.size[0]):#w  </span><br><span class="line">         tmpls.append( image_file.getpixel((w,h))  )  </span><br><span class="line">            </span><br><span class="line">   return tmpls  </span><br><span class="line"></span><br><span class="line">#获取平均灰度值   </span><br><span class="line">def getAvg(ls): </span><br><span class="line">   return sum(ls)&#x2F;len(ls)  </span><br><span class="line"></span><br><span class="line">#比较100个字符有几个字符相同 </span><br><span class="line">def getMH(a,b):  </span><br><span class="line">   dist &#x3D; 0;  </span><br><span class="line">   for i in range(0,len(a)):  </span><br><span class="line">      if a[i]&#x3D;&#x3D;b[i]:  </span><br><span class="line">         dist&#x3D;dist+1  </span><br><span class="line">   return dist  </span><br><span class="line">   </span><br><span class="line">def getImgHash(fne):  </span><br><span class="line">   image_file &#x3D; Image.open(fne) # 打开  </span><br><span class="line">   image_file&#x3D;image_file.resize((12, 12))#重置图片大小我12px X 12px  </span><br><span class="line">   image_file&#x3D;image_file.convert(&quot;L&quot;)#转256灰度图  </span><br><span class="line">   Grayls&#x3D;getGray(image_file)#灰度集合  </span><br><span class="line">   avg&#x3D;getAvg(Grayls)#灰度平均值  </span><br><span class="line">   bitls&#x3D;&#39;&#39;#接收获取0或1  </span><br><span class="line">   #除去变宽1px遍历像素  </span><br><span class="line">   for h in range(1,  image_file.size[1]-1):#h  </span><br><span class="line">      for w in range(1, image_file.size[0]-1):#w  </span><br><span class="line">         if image_file.getpixel((w,h))&gt;&#x3D;avg:#像素的值比较平均值 大于记为1 小于记为0  </span><br><span class="line">            bitls&#x3D;bitls+&#39;1&#39;  </span><br><span class="line">         else:  </span><br><span class="line">            bitls&#x3D;bitls+&#39;0&#39;  </span><br><span class="line">   return bitls  </span><br><span class="line">&#39;&#39;&#39;&#39;&#39;          </span><br><span class="line">   m2 &#x3D; hashlib.md5()    </span><br><span class="line">   m2.update(bitls) </span><br><span class="line">   print m2.hexdigest(),bitls </span><br><span class="line">   return m2.hexdigest() </span><br><span class="line">&#39;&#39;&#39;  </span><br><span class="line"></span><br><span class="line">#图片地址自行替换</span><br><span class="line">bijiaotupian &#x3D; &quot;.&#x2F;&#x2F;picture&#x2F;&#x2F;kangshifu01.jpg&quot;</span><br><span class="line">openfile &#x3D; &quot;.&#x2F;&#x2F;picture&quot;</span><br><span class="line">a&#x3D;getImgHash(bijiaotupian)  </span><br><span class="line">#被打开的文件夹中的图片</span><br><span class="line">files &#x3D; os.listdir(openfile)#图片文件夹地址自行替换  </span><br><span class="line">for file in files:  </span><br><span class="line">   b&#x3D;getImgHash(&quot;.&#x2F;&#x2F;picture&#x2F;&#x2F;&quot;+str(file))  </span><br><span class="line">   compare&#x3D;getMH(a,b)  </span><br><span class="line">   print(file,u&#39;相似度&#39;,str(compare)+&#39;%&#39;)</span><br><span class="line">      </span><br><span class="line">#    if compare &gt;&#x3D; 90:</span><br><span class="line">#        print(file,u&#39;相似度&#39;,str(compare)+&#39;%&#39;)</span><br><span class="line">#    else:</span><br><span class="line">#        pass</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>好玩的JS数组</title>
      <link href="/2020/03/11/%E5%A5%BD%E7%8E%A9%E7%9A%84JS%E6%95%B0%E7%BB%84/"/>
      <url>/2020/03/11/%E5%A5%BD%E7%8E%A9%E7%9A%84JS%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="好玩的js数组"><a href="#好玩的js数组" class="headerlink" title="好玩的js数组"></a>好玩的js数组</h1><p>数组去重</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function quChong(array) &#123;</span><br><span class="line">    var reuslt &#x3D; []</span><br><span class="line">    for (var i &#x3D; 0; i &lt; array.length) &#123;</span><br><span class="line">        var value &#x3D; array[i]</span><br><span class="line">        if (!result.includes(value)) &#123;</span><br><span class="line">            result.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组是否相等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function arrayEqual(a, b) &#123;</span><br><span class="line">    if (a.lenght !&#x3D; b.length) &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        for (var i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            var aValue &#x3D; a[i]</span><br><span class="line">            var bValue &#x3D; b[i]</span><br><span class="line">            if (aValue !&#x3D; bValue) &#123;</span><br><span class="line">                return false</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>两个数组的交集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function jiaoJi(a, b) &#123;</span><br><span class="line">    var result &#x3D; []</span><br><span class="line">    for (var i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">        var value &#x3D; a[i]</span><br><span class="line">        if (b.includes(value)) &#123;</span><br><span class="line">            result.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>寻找两个数组的不同</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function difference(a, b) &#123;</span><br><span class="line">    var result &#x3D; []</span><br><span class="line">    for (var i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">        var value &#x3D; a[i]</span><br><span class="line">        if (!b.includes(value)) &#123;</span><br><span class="line">            result.push(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在两个数组中的非共公元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function differenceTwo(a, b) &#123;</span><br><span class="line">    var result &#x3D; []</span><br><span class="line">    var aResult &#x3D; difference(a, b)</span><br><span class="line">    var bResult &#x3D; difference(b, a)</span><br><span class="line">    var result &#x3D; aResult.concat(bResult)</span><br><span class="line">    return  result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>判断两个数组是否包含</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function xiangDeng(a, b) &#123;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">        var value &#x3D; a[i]</span><br><span class="line">        if (!b.includes(value)) &#123;</span><br><span class="line">            return false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-7-Z字形变换</title>
      <link href="/2020/03/11/leetcode-6-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
      <url>/2020/03/11/leetcode-6-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一：题目："><a href="#一：题目：" class="headerlink" title="一：题目："></a>一：题目：</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure><p>示例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure><p>示例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure><h2 id="二：思路解析"><a href="#二：思路解析" class="headerlink" title="二：思路解析"></a>二：思路解析</h2><ol><li>首先分析题目，输出内容其实就是重排之后的各行相加，那么问题就变为了按照规律排列，序号为n的字符在第几行</li><li>可以把字符串分为几组，然后每组按照规律push到不同行中，最后各行相加得出结果</li></ol><h2 id="三：解决代码JavaScript版本："><a href="#三：解决代码JavaScript版本：" class="headerlink" title="三：解决代码JavaScript版本："></a>三：解决代码JavaScript版本：</h2><p>我的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">var convert &#x3D; function(s, numRows) &#123;</span><br><span class="line">    if (numRows &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">        return &#39;&#39;;</span><br><span class="line">    &#125; else if (numRows &#x3D;&#x3D;&#x3D; 1) &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var res &#x3D; [];</span><br><span class="line">    var desc &#x3D; false;</span><br><span class="line">    var index &#x3D; 0;</span><br><span class="line">    var length &#x3D; s.length</span><br><span class="line"></span><br><span class="line">    for (var i &#x3D; 0; i &lt; length; i++) &#123;</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;res[index] is &#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&quot;, res[index])</span><br><span class="line">        res[index] &#x3D; res[index] ? res[index] + s[i] : s[i]</span><br><span class="line"></span><br><span class="line">        if (index % (numRows - 1) &#x3D;&#x3D;&#x3D; 0) &#123;</span><br><span class="line">            desc &#x3D; !desc;</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F; console.log(&quot;index is &#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&quot;, index)</span><br><span class="line">        index &#x3D; desc ? index + 1: index - 1;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; console.log(&#39;for over res is &#x3D;&#x3D;&#x3D;&gt;&gt;&gt;&#39;, res)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return res.join(&#39;&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优秀答案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var betterConvert &#x3D; function(s, numRows) &#123;</span><br><span class="line">    var map &#x3D; &#123;&#125;</span><br><span class="line">    var j &#x3D; 0;</span><br><span class="line">    if (numRows &lt;&#x3D; 1) &#123;</span><br><span class="line">        return s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var boo &#x3D; true;</span><br><span class="line">    for (var i &#x3D; 0; i &lt; s.length; i++) &#123;</span><br><span class="line">        if (!map[j]) &#123;</span><br><span class="line">            map[j] &#x3D; &#39;&#39;;</span><br><span class="line">        &#125;</span><br><span class="line">        map[j] &#x3D; map[j] + s[i];</span><br><span class="line"></span><br><span class="line">        if (boo) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            if (j &gt;&#x3D; numRows) &#123;</span><br><span class="line">                j &#x3D; j -2;</span><br><span class="line">                boo &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            j--;</span><br><span class="line">            if (j &lt; 0) &#123;</span><br><span class="line">                boo &#x3D; true;</span><br><span class="line">                j &#x3D; j + 2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    s &#x3D; &#39;&#39;;</span><br><span class="line">    Object.keys(map).forEach(i &#x3D;&gt; &#123;</span><br><span class="line">        s &#x3D; s + map[i];</span><br><span class="line">    &#125;)</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四：总结："><a href="#四：总结：" class="headerlink" title="四：总结："></a>四：总结：</h2><ol><li>优秀答案为使用了Map，执行效率确实比数组更好</li><li>代码运行时可以打印下运行过程，这样有助于理解</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/09/hello-world/"/>
      <url>/2020/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
