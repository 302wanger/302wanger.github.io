<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>为什么编程语言的数组下标从0开始</title>
      <link href="/2020/03/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E4%BB%8E0%E5%BC%80%E5%A7%8B/"/>
      <url>/2020/03/11/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E7%9A%84%E6%95%B0%E7%BB%84%E4%B8%8B%E6%A0%87%E4%BB%8E0%E5%BC%80%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p>举个例子，一个小孩子将5个玩具从筐里拿出来，他是这么计数的：1，2，3，4，5 。而在编程领域，从数组里取值，是这么计数的：0，1，2，3，4。<br>是不是很神奇，那为何编程领域要这么做的？<br>通过查找资料和文章，发现原因如下：</p><h4 id="原因1-历史原因，别人是这么干的"><a href="#原因1-历史原因，别人是这么干的" class="headerlink" title="原因1:历史原因，别人是这么干的"></a>原因1:历史原因，别人是这么干的</h4><p>C语言设计者用0开始计数数组下标，之后的Java，JavsScript等高级语言都模仿了C语言，或者说，为了在一定成都上减少C语言程序员学习Java的学习成本，因此继续沿用了从0开始计数的习惯。</p><p>实际上，也有其他语言中数组并不是从0开始的，比如Matlab，甚至还有一些语言支持负数下标，比如Python。</p><h4 id="原因2-底层为了性能"><a href="#原因2-底层为了性能" class="headerlink" title="原因2:底层为了性能"></a>原因2:底层为了性能</h4><p>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移”。如果用a来表示数组的首地址，a[0]就是偏移为0的位置，也就是首地址，a[n]就表示偏移n个type_size 的位置，所以计算a[n]的内存地址只需要下边这个公式：</p><pre><code>a[n]_address = base_address + n * type_size</code></pre><p>但是，如果数组从1开始计数，那么计算数组元素的a[n]的内存地址就会变成</p><pre><code>a[n]_address = base_address + (n-1)*type_size</code></pre><p>对比两个公式，如果从1开始编号，每次随机访问数组就多了一次减法运算，对于CPU来说，就是多了一次减法指令。</p><p>数组作为非常基础的数据结构，通过下标随机访问数组元素又是非常基础的编程操作，效率的优化要尽可能做到极致。所以为了减少一次减法操作，数组选择了从0开始编号，而不是从1开始。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>三种方法实现阶乘</title>
      <link href="/2020/03/11/%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E9%98%B6%E4%B9%98/"/>
      <url>/2020/03/11/%E4%B8%89%E7%A7%8D%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0%E9%98%B6%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h1 id="三种实现阶乘的方法"><a href="#三种实现阶乘的方法" class="headerlink" title="三种实现阶乘的方法"></a>三种实现阶乘的方法</h1><p>方法1</p><pre><code>function factorialize(num) {  // 如果num小于1，则终止  if (num&lt;0) {    return -1;  } else if (num === 0 || num === 1) {    // num=0或num=1，返回1，这个是定理    return 1;  } else{    return num * factorialize(num-1);  }}factorialize(5);</code></pre><p>第一个方法及其简单，else语句中是重复调用函数。但是这种方法好像有内存溢出的风险；</p><p>方法2：for循环</p><pre><code>function factorialize(num) {  if (num &lt; 0) {    return -1;  } else if (num===0 || num === 1) {    return 1;  } else {    for (var i = num -1; i &gt;= 1; i--) {      num *= i;    }  }  return num;}</code></pre><p>方法3：while循环</p><pre><code>function factorialize(num) {  var result = num;  if (num &lt; 1) {    return -1;  } else if (num===0 || num===1) {    return 1;  } else {    while (num &gt; 1) {      num--;      result *= num;    }  }  return result;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>罗马数字转整数</title>
      <link href="/2020/03/11/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>/2020/03/11/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>罗马数字包含以下七种字符:I，V，X，L，C，D和M。</p><p><em>字符</em>          <em>数值</em><br>I             1<br>V             5<br>X             10<br>L             50<br>C             100<br>D             500<br>M             1000<br>例如， 罗马数字 2 写做II，即为两个并列的 1。12 写做XII，即为X+II。 27 写做XXVII, 即为XX+V+II。<br>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做IIII，而是IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I可以放在V(5) 和X(10) 的左边，来表示 4 和 9。</li><li>X可以放在L(50) 和C(100) 的左边，来表示 40 和90。</li><li>C可以放在D(500) 和M(1000) 的左边，来表示400 和900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1到 3999 的范围内。</li></ul><h1 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h1><pre><code>let romanObj = {    &#39;I&#39;: 1,    &#39;V&#39;: 5,    &#39;X&#39;: 10,    &#39;L&#39;: 50,    &#39;C&#39;: 100,    &#39;D&#39;: 500,    &#39;M&#39;: 1000}let romanToInt = function(s) {    let max = 0;    let result = 0;    let sLength = s.length - 1;    for (var i = sLength; i &gt;= 0; i--) {        var currRoman = s[i];        var currVal = romanObj[currRoman];        result += currVal &gt; max ? currVal : -currVal;        max = Math.max(max, currVal);}    return result;}</code></pre><h1 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h1><p>罗马字符串自右向左是数值递增的，而一旦出现不符合规律的，就应该减去该值，即将当前值取负。<br>该方法的关键就在于此，max中保存的就相当于最右边值，currVal是左边值。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Python进行两张图片比较</title>
      <link href="/2020/03/11/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E4%B8%A4%E5%BC%A0%E5%9B%BE%E7%89%87%E6%AF%94%E8%BE%83/"/>
      <url>/2020/03/11/%E5%88%A9%E7%94%A8Python%E8%BF%9B%E8%A1%8C%E4%B8%A4%E5%BC%A0%E5%9B%BE%E7%89%87%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h3 id="环境准备："><a href="#环境准备：" class="headerlink" title="环境准备："></a>环境准备：</h3><p>Python 2.7 or Python 3</p><h3 id="需要安装的包"><a href="#需要安装的包" class="headerlink" title="需要安装的包"></a>需要安装的包</h3><p>pytesseract<br>pytesser<br>Pillow</p><h3 id="达成目标"><a href="#达成目标" class="headerlink" title="达成目标"></a>达成目标</h3><p>比较两张图片是不是一个图片</p><h3 id="如何运行"><a href="#如何运行" class="headerlink" title="如何运行"></a>如何运行</h3><pre><code>python file.py</code></pre><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><pre><code>#!C:/Python27 &amp; Python3  #coding=utf-8 # 1. pip install pillow# 2. pip install pytesseract# 3. pip install pytesser# Run: python comporePicture.py import pytesseract  from pytesser import *  from PIL import Image,ImageEnhance,ImageFilter  import os  import fnmatch  import re,time  import urllib, random  #import hashlib    def getGray(image_file):     tmpls=[]     for h in range(0,  image_file.size[1]):#h        for w in range(0, image_file.size[0]):#w           tmpls.append( image_file.getpixel((w,h))  )     return tmpls  #获取平均灰度值   def getAvg(ls):    return sum(ls)/len(ls)  #比较100个字符有几个字符相同 def getMH(a,b):     dist = 0;     for i in range(0,len(a)):        if a[i]==b[i]:           dist=dist+1     return dist  def getImgHash(fne):     image_file = Image.open(fne) # 打开     image_file=image_file.resize((12, 12))#重置图片大小我12px X 12px     image_file=image_file.convert(&quot;L&quot;)#转256灰度图     Grayls=getGray(image_file)#灰度集合     avg=getAvg(Grayls)#灰度平均值     bitls=&#39;&#39;#接收获取0或1     #除去变宽1px遍历像素     for h in range(1,  image_file.size[1]-1):#h        for w in range(1, image_file.size[0]-1):#w           if image_file.getpixel((w,h))&gt;=avg:#像素的值比较平均值 大于记为1 小于记为0              bitls=bitls+&#39;1&#39;           else:              bitls=bitls+&#39;0&#39;     return bitls  &#39;&#39;&#39;&#39;&#39;             m2 = hashlib.md5()       m2.update(bitls)    print m2.hexdigest(),bitls    return m2.hexdigest() &#39;&#39;&#39;  #图片地址自行替换bijiaotupian = &quot;.//picture//kangshifu01.jpg&quot;openfile = &quot;.//picture&quot;a=getImgHash(bijiaotupian)  #被打开的文件夹中的图片files = os.listdir(openfile)#图片文件夹地址自行替换  for file in files:     b=getImgHash(&quot;.//picture//&quot;+str(file))     compare=getMH(a,b)     print(file,u&#39;相似度&#39;,str(compare)+&#39;%&#39;)#    if compare &gt;= 90:#        print(file,u&#39;相似度&#39;,str(compare)+&#39;%&#39;)#    else:#        pass</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>好玩的JS数组</title>
      <link href="/2020/03/11/%E5%A5%BD%E7%8E%A9%E7%9A%84JS%E6%95%B0%E7%BB%84/"/>
      <url>/2020/03/11/%E5%A5%BD%E7%8E%A9%E7%9A%84JS%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="好玩的js数组"><a href="#好玩的js数组" class="headerlink" title="好玩的js数组"></a>好玩的js数组</h1><p>数组去重</p><pre><code>function quChong(array) {    var reuslt = []    for (var i = 0; i &lt; array.length) {        var value = array[i]        if (!result.includes(value)) {            result.push(value)        }    }    return result}</code></pre><p>数组是否相等</p><pre><code>function arrayEqual(a, b) {    if (a.lenght != b.length) {        return false    } else {        for (var i = 0; i &lt; a.length; i++) {            var aValue = a[i]            var bValue = b[i]            if (aValue != bValue) {                return false            }        }        return true    }}</code></pre><p>两个数组的交集</p><pre><code>function jiaoJi(a, b) {    var result = []    for (var i = 0; i &lt; a.length; i++) {        var value = a[i]        if (b.includes(value)) {            result.push(value)        }    }    return result}</code></pre><p>寻找两个数组的不同</p><pre><code>function difference(a, b) {    var result = []    for (var i = 0; i &lt; a.length; i++) {        var value = a[i]        if (!b.includes(value)) {            result.push(value)        }    }    return result}</code></pre><p>在两个数组中的非共公元素</p><pre><code>function differenceTwo(a, b) {    var result = []    var aResult = difference(a, b)    var bResult = difference(b, a)    var result = aResult.concat(bResult)    return  result}</code></pre><p>判断两个数组是否包含</p><pre><code>function xiangDeng(a, b) {    for (var i = 0; i &lt; a.length; i++) {        var value = a[i]        if (!b.includes(value)) {            return false        }    }    return true}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode-7-Z字形变换</title>
      <link href="/2020/03/11/leetcode-6-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/"/>
      <url>/2020/03/11/leetcode-6-Z%E5%AD%97%E5%BD%A2%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="一：题目："><a href="#一：题目：" class="headerlink" title="一：题目："></a>一：题目：</h2><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p><p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p><pre><code>L   C   I   RE T O E S I I GE   D   H   N</code></pre><p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p><p>请你实现这个将字符串进行指定行数变换的函数：</p><pre><code>string convert(string s, int numRows);</code></pre><p>示例1：</p><pre><code>输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 3输出: &quot;LCIRETOESIIGEDHN&quot;</code></pre><p>示例2：</p><pre><code>输入: s = &quot;LEETCODEISHIRING&quot;, numRows = 4输出: &quot;LDREOEIIECIHNTSG&quot;解释:L     D     RE   O E   I IE C   I H   NT     S     G</code></pre><h2 id="二：思路解析"><a href="#二：思路解析" class="headerlink" title="二：思路解析"></a>二：思路解析</h2><ol><li>首先分析题目，输出内容其实就是重排之后的各行相加，那么问题就变为了按照规律排列，序号为n的字符在第几行</li><li>可以把字符串分为几组，然后每组按照规律push到不同行中，最后各行相加得出结果</li></ol><h2 id="三：解决代码JavaScript版本："><a href="#三：解决代码JavaScript版本：" class="headerlink" title="三：解决代码JavaScript版本："></a>三：解决代码JavaScript版本：</h2><p>我的方法：</p><pre><code>var convert = function(s, numRows) {    if (numRows === 0) {        return &#39;&#39;;    } else if (numRows === 1) {        return s;    }    var res = [];    var desc = false;    var index = 0;    var length = s.length    for (var i = 0; i &lt; length; i++) {        // console.log(&quot;res[index] is ===&gt;&gt;&gt;&quot;, res[index])        res[index] = res[index] ? res[index] + s[i] : s[i]        if (index % (numRows - 1) === 0) {            desc = !desc;        }        // console.log(&quot;index is ===&gt;&gt;&gt;&quot;, index)        index = desc ? index + 1: index - 1;        // console.log(&#39;for over res is ===&gt;&gt;&gt;&#39;, res)    }    return res.join(&#39;&#39;)}</code></pre><p>优秀答案：</p><pre><code>var betterConvert = function(s, numRows) {    var map = {}    var j = 0;    if (numRows &lt;= 1) {        return s;    }    var boo = true;    for (var i = 0; i &lt; s.length; i++) {        if (!map[j]) {            map[j] = &#39;&#39;;        }        map[j] = map[j] + s[i];        if (boo) {            j++;            if (j &gt;= numRows) {                j = j -2;                boo = false;            }        } else {            j--;            if (j &lt; 0) {                boo = true;                j = j + 2;            }        }    }    s = &#39;&#39;;    Object.keys(map).forEach(i =&gt; {        s = s + map[i];    })    return s;}</code></pre><h2 id="四：总结："><a href="#四：总结：" class="headerlink" title="四：总结："></a>四：总结：</h2><ol><li>优秀答案为使用了Map，执行效率确实比数组更好</li><li>代码运行时可以打印下运行过程，这样有助于理解</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/09/hello-world/"/>
      <url>/2020/03/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
